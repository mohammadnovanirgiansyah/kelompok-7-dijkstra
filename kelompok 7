
from itertools import permutations

class WeightedGraph:
    #initialization
    def _init_(self):
        self.cityList = {}

    def printGraph(self):
        #mengiterasi setiap city
        for city in self.cityList:
            #setiap kota print nama kota
            print(city, ":", self.cityList[city])

            # Print distances to neighboring cities
            for neighbor, distance in self.cityList[city].items():
                #print tetangga dan jarak
                print("    ->", neighbor, ":", distance)

    def tambahkanKota(self, kota):
        #jika kota tidak ada di cityList
        if kota not in self.cityList:
            #maka tambahkan kota
            self.cityList[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        #jika kotaDihapus ada di cityList
        if kotaDihapus in self.cityList:
            # Remove the city from the city list
            del self.cityList[kotaDihapus]
            # Remove references to the deleted city from other cities
            for kota in self.cityList:
                #jika kotaDihapus ada di cityList[kota]
                if kotaDihapus in self.cityList[kota]:
                    #maka hapus kotaDihapus
                    del self.cityList[kota][kotaDihapus]
            return True
        return False

    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota1][kota2] = jarak
            self.cityList[kota2][kota1] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.cityList and kota2 in self.cityList:
            if kota2 in self.cityList[kota1]:
                del self.cityList[kota1][kota2]
                del self.cityList[kota2][kota1]
                return True
        return False

    def dijkstra(self, source):
# Initialize distances with infinity
        #distances = {city: float('inf') for city in self.cityList}
        
        distances = {}
        for city in self.cityList:
            distances[city] = float('inf')
        
        distances[source] = 0
        print (distances)
        # Initialize list of unvisited cities
        unvisited_cities = []
        for city in self.cityList:
            unvisited_cities.append(city)
        #unvisited_cities = list(self.cityList.keys())
        print (unvisited_cities)

        while unvisited_cities:
            # Find the unvisited city with the smallest distance
            min_distance = float('inf')
            closest_city = None
            #mengiterasi setiap kota yang belum dikunjungi
            for city in unvisited_cities:
                #jika jarak kota lebih kecil dari min_distance
                if distances[city] < min_distance:
                    min_distance = distances[city]
                    closest_city = city

            # Remove the closest city from unvisited list
            unvisited_cities.remove(closest_city)

            # Update distances to neighboring cities
            for neighbor, weight in self.cityList[closest_city].items():
                #jika jarak kota terdekat + weight lebih kecil dari jarak kota tetangga
                distance = distances[closest_city] + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance

        return distances
    
    def tsp(self):
        # Initialize variables
        shortest_distance = float('inf')
        shortest_path = []

        # Generate all permutations of cities
        cities = list(self.cityList.keys())
        for path in permutations(cities):
            # Calculate total distance for current permutation
            total_distance = 0
            for i in range(len(path) - 1):
                if path[i] in self.cityList and path[i + 1] in self.cityList[path[i]]:
                    total_distance += self.cityList[path[i]][path[i + 1]]
                else:
                    total_distance = float('inf')
                    break  # Break if path is invalid
            # Check if current permutation is shorter than the current shortest path
            if total_distance < shortest_distance:
                shortest_distance = total_distance
                shortest_path = path

        return shortest_path, shortest_distance

# Example usage with Dijkstra's algorithm:
petaJawaTimur = WeightedGraph()
petaJawaTimur.tambahkanKota("Surabaya")
petaJawaTimur.tambahkanKota("Gresik")
petaJawaTimur.tambahkanKota("Sidoarjo")
petaJawaTimur.tambahkanKota("Lamongan")
petaJawaTimur.tambahkanKota("Mojokerto")
petaJawaTimur.tambahkanKota("Pasuruan")
petaJawaTimur.tambahkanKota("Kediri")
petaJawaTimur.tambahkanKota("Nganjuk")
petaJawaTimur.tambahkanKota("Malang")
petaJawaTimur.tambahkanKota("Blitar")

petaJawaTimur.tambahkanJalan("Surabaya", "Gresik", 21)
petaJawaTimur.tambahkanJalan("Surabaya", "Sidoarjo", 25)
petaJawaTimur.tambahkanJalan("Surabaya", "Lamongan", 47)
petaJawaTimur.tambahkanJalan("Gresik", "Sidoarjo", 42)
petaJawaTimur.tambahkanJalan("Gresik", "Lamongan", 30)
petaJawaTimur.tambahkanJalan("Gresik", "Mojokerto", 53)
petaJawaTimur.tambahkanJalan("Sidoarjo", "Lamongan", 65)
petaJawaTimur.tambahkanJalan("Sidoarjo", "Mojokerto", 36)
petaJawaTimur.tambahkanJalan("Sidoarjo", "Pasuruan", 58)
petaJawaTimur.tambahkanJalan("Lamongan", "Mojokerto", 51)
petaJawaTimur.tambahkanJalan("Lamongan", "Pasuruan", 121)
petaJawaTimur.tambahkanJalan("Lamongan", "Kediri", 112)
petaJawaTimur.tambahkanJalan("Mojokerto", "Pasuruan", 81)
petaJawaTimur.tambahkanJalan("Mojokerto", "Kediri", 75)
petaJawaTimur.tambahkanJalan("Mojokerto", "Nganjuk", 66)
petaJawaTimur.tambahkanJalan("Pasuruan", "Kediri", 134)
petaJawaTimur.tambahkanJalan("Pasuruan", "Nganjuk", 129)
petaJawaTimur.tambahkanJalan("Pasuruan", "Malang", 51)
petaJawaTimur.tambahkanJalan("Kediri", "Nganjuk", 55)
petaJawaTimur.tambahkanJalan("Kediri", "Malang", 101)
petaJawaTimur.tambahkanJalan("Kediri", "Blitar", 40)
petaJawaTimur.tambahkanJalan("Nganjuk", "Malang", 119)
petaJawaTimur.tambahkanJalan("Nganjuk", "Blitar", 76)
petaJawaTimur.tambahkanJalan("Nganjuk", "Surabaya", 121)
petaJawaTimur.tambahkanJalan("Malang", "Blitar", 79)
petaJawaTimur.tambahkanJalan("Malang", "Surabaya", 89)
petaJawaTimur.tambahkanJalan("Malang", "Gresik", 105)
petaJawaTimur.tambahkanJalan("Blitar", "Surabaya", 148)
petaJawaTimur.tambahkanJalan("Blitar", "Gresik", 151)
petaJawaTimur.tambahkanJalan("Blitar", "Sidoarjo", 135)

petaJawaTimur.printGraph()
shortest_distances = petaJawaTimur.dijkstra("Surabaya")
print("Shortest distances from Surabaya to other cities:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJawaTimur.tsp()
print("Shortest TSP path:", shortest_path)
print("Shortest TSP distance:", shortest_distance)
